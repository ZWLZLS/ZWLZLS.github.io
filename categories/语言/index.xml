<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>语言 on 我的博客</title>
    <link>https://zwlzls.github.io/categories/%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 语言 on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Jan 2025 15:13:58 +0800</lastBuildDate><atom:link href="https://zwlzls.github.io/categories/%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python01</title>
      <link>https://zwlzls.github.io/posts/python01/</link>
      <pubDate>Fri, 17 Jan 2025 15:13:58 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/python01/</guid>
      <description>Python中级使用 函数 调用函数 参数可以多个 &amp;gt;&amp;gt;&amp;gt; max(1, 2) 2 &amp;gt;&amp;gt;&amp;gt; max(2, 3, 1, -5) 3 参数类型需要一致 &amp;gt;&amp;gt;&amp;gt; abs(&amp;#39;a&amp;#39;) TypeError: bad operand type for abs(): &amp;#39;str&amp;#39; 函数调用 &amp;gt;&amp;gt;&amp;gt; abs(100) 100 &amp;gt;&amp;gt;&amp;gt; abs(-20) 20 数据类型转换
&amp;gt;&amp;gt;&amp;gt; int(&amp;#39;123&amp;#39;) 123 &amp;gt;&amp;gt;&amp;gt; int(12.34) 12 &amp;gt;&amp;gt;&amp;gt; float(&amp;#39;12.34&amp;#39;) 12.34 &amp;gt;&amp;gt;&amp;gt; str(1.23) &amp;#39;1.23&amp;#39; &amp;gt;&amp;gt;&amp;gt; str(100) &amp;#39;100&amp;#39; &amp;gt;&amp;gt;&amp;gt; bool(1) True &amp;gt;&amp;gt;&amp;gt; bool(&amp;#39;&amp;#39;) False 函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量
&amp;gt;&amp;gt;&amp;gt; a = abs # 变量a指向abs函数 &amp;gt;&amp;gt;&amp;gt; a(-1) # 所以也可以通过a调用abs函数 1 定义函数 要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回
def my_abs(x): if x &amp;gt;= 0: return x else: return -x print(my_abs(-99)) 空函数：定义一个什么事也不做的空函数，可以用pass语句</description>
    </item>
    
    <item>
      <title>Python00</title>
      <link>https://zwlzls.github.io/posts/python00/</link>
      <pubDate>Tue, 07 Jan 2025 22:12:38 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/python00/</guid>
      <description>Python基础语法 Python基础 # print absolute value of an integer: a = 100 if a &amp;gt;= 0: print(a) else: print(-a) Python的语法比较简单 #开头的语句是注释
当语句以冒号:结尾时，缩进的语句视为代码块
缩进实用四个空格的缩进
议input
用input()读取用户的输入
birth = input(&amp;#39;birth: &amp;#39;) if birth &amp;lt; 2000: print(&amp;#39;00前&amp;#39;) TypeError: unorderable types: str() &amp;gt; int() 因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数
s = input(&amp;#39;birth: &amp;#39;) birth = int(s) if birth &amp;lt; 2000: print(&amp;#39;00前&amp;#39;) 可以得到正确地结果
议不可变对象：str是不变对象，list是可变对象
对于可变对象，比如list
&amp;gt;&amp;gt;&amp;gt; a = [&amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;] &amp;gt;&amp;gt;&amp;gt; a.sort() &amp;gt;&amp;gt;&amp;gt; a [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] 对于不可变对象，比如str</description>
    </item>
    
    <item>
      <title>Java00</title>
      <link>https://zwlzls.github.io/posts/java00/</link>
      <pubDate>Tue, 07 Jan 2025 22:12:22 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/java00/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SQL00</title>
      <link>https://zwlzls.github.io/posts/sql00/</link>
      <pubDate>Tue, 07 Jan 2025 22:12:09 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/sql00/</guid>
      <description>SQL基本使用 关系型数据库 数据库：保存用户数据
随着应用程序的功能越复杂，数据量越大，管理这些数据就成了大问题 读写文件并解析出数据需要大量重复代码； 从成千上万的数据中快速查询出指定数据需要复杂的逻辑 数据模型
层次模型：以“上下级”的层次关系来组织数据的一种方式，看起来就像一颗树 网状模型：每个数据节点和其他很多节点都连接起来，看起来就像很多城市之间的路网 关系模型：数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，看起来就是一个Excel表 常见数据类型
名称 类型 说明 INT 整型 4字节整数类型，范围约+/-21亿 BIGINT 长整型 8字节整数类型，范围约+/-922亿亿 REAL 浮点型 4字节浮点数，范围约+/-1038 DOUBLE 浮点型 8字节浮点数，范围约+/-10308 DECIMAL(M,N) 高精度小数 由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算 CHAR(N) 定长字符串 存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串 VARCHAR(N) 变长字符串 存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串 BOOLEAN 布尔类型 存储True或者False DATE 日期类型 存储日期，例如，2018-06-22 TIME 时间类型 存储时间，例如，12:20:59 DATETIME 日期和时间类型 存储日期+时间，例如，2018-06-22 12:20:59 SQL
结构化查询语言的缩写，用来访问和操作数据库系统。SQL语句既可以查询数据库中的数据，也可以添加、更新和删除数据库中的数据，还对数据库进行管理和维护操做 SQL语言关键字不区分大小写！！！但表名和列名不一定 MySQL本身只是一个SQL接口，内部包含多种数据引擎
InnoDB：一款支持事务的数据库引擎 MyISAM：MySQL早期默认数据库引擎，不支持事务 关系模型 表的每一行称为记录（Record），记录是一个逻辑意义上的数据。
表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。
主键
记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响 主键的一个基本原则：不使用任何业务相关的字段作为主键，也不应该允许NULL 一般字段命名为id ，常见类型有 自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键 全局唯一GUID类型：也称UUID，使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的 联合主键 通过多个字段唯一标识记录，即两个或更多的字段都设置为主键 外键
在students表中，通过class_id的字段，可以把数据与另一张表关联起来，这种列称为外键
定义外键约束，关系数据库可以保证无法插入无效的数据。即如果classes表不存在id=99的记录，students表就无法插入class_id=99的记录
外键并不是通过列名实现的，而是通过定义外键约束实现的：</description>
    </item>
    
  </channel>
</rss>
