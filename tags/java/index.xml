<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on 我的博客</title>
    <link>https://zwlzls.github.io/tags/java/</link>
    <description>Recent content in Java on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Jan 2025 22:06:05 +0800</lastBuildDate><atom:link href="https://zwlzls.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java03</title>
      <link>https://zwlzls.github.io/posts/java03/</link>
      <pubDate>Wed, 22 Jan 2025 22:06:05 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/java03/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java高级</title>
      <link>https://zwlzls.github.io/posts/java02/</link>
      <pubDate>Wed, 22 Jan 2025 22:06:01 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/java02/</guid>
      <description>异常处理 Java的异常 调用方获取调用失败的信息
约定返回错误码
处理一个文件，如果返回0，表示成功，返回其他整数，表示约定的错误码：
int code = processFile(&amp;#34;C:\\test.txt&amp;#34;); if (code == 0) { // ok: } else { // error: switch (code) { case 1: // file not found: case 2: // no read permission: default: // unknown error: } } 语言层面上提供一个异常处理机制、
try { String s = processFile(“C:\\test.txt”); // ok: } catch (FileNotFoundException e) { // file not found: } catch (SecurityException e) { // no read permission: } catch (IOException e) { // io error: } catch (Exception e) { // other error: } 异常是class，它的继承关系如下：</description>
    </item>
    
    <item>
      <title>Java中级</title>
      <link>https://zwlzls.github.io/posts/java01/</link>
      <pubDate>Wed, 22 Jan 2025 22:05:54 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/java01/</guid>
      <description>面向对象基础 理解： class是一种对象模版，定义了如何创建实例，class本身就是一种数据类型
instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同
定义class
创建一个类，例如，给这个类命名为Person，就是定义一个class：
class Person { public String name; public int age; } class Book { public String name; public String author; public String isbn; public double price; } 创建实例
定义了class，只是定义了对象模版，而要根据对象模版创建出真正的对象实例，必须用new操作符
Person ming = new Person(); 区分Person ming是定义Person类型的变量ming，而new Person()是创建Person实例
ming.name = &amp;#34;Xiao Ming&amp;#34;; // 对字段name赋值 ming.age = 12; // 对字段age赋值 System.out.println(ming.name); // 访问字段name Person hong = new Person(); hong.name = &amp;#34;Xiao Hong&amp;#34;; hong.age = 15; 上述两个变量分别指向两个不同的实例，它们在内存中的结构如下：
┌──────────────────┐ ming ──────▶│Person instance │ ├──────────────────┤ │name = &amp;#34;Xiao Ming&amp;#34;│ │age = 12 │ └──────────────────┘ ┌──────────────────┐ hong ──────▶│Person instance │ ├──────────────────┤ │name = &amp;#34;Xiao Hong&amp;#34;│ │age = 15 │ └──────────────────┘ 方法 意义：</description>
    </item>
    
    <item>
      <title>Java00</title>
      <link>https://zwlzls.github.io/posts/java00/</link>
      <pubDate>Tue, 07 Jan 2025 22:12:22 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/java00/</guid>
      <description>Java基础 程序流程 Java默认初始值与无默认区分
public class DefaultValuesExample { int instanceVar; // 默认值: 0 static int staticVar; // 默认值: 0 int[] array = new int[5]; // 数组元素默认值: 0 public void method() { int localVar; // 局部变量，必须显式初始化 // System.out.println(localVar); // 编译错误 } public static void main(String[] args) { DefaultValuesExample example = new DefaultValuesExample(); System.out.println(&amp;#34;Instance variable: &amp;#34; + example.instanceVar); System.out.println(&amp;#34;Static variable: &amp;#34; + staticVar); System.out.println(&amp;#34;Array element: &amp;#34; + example.array[0]); } } 局部变量必须有显式初始化
Java简易程序
public class Hello { public static void main(String[] args) { System.</description>
    </item>
    
  </channel>
</rss>
