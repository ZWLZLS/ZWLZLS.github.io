<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on 我的博客</title>
    <link>https://zwlzls.github.io/tags/python/</link>
    <description>Recent content in Python on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Jan 2025 15:14:04 +0800</lastBuildDate><atom:link href="https://zwlzls.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python高级</title>
      <link>https://zwlzls.github.io/posts/python02/</link>
      <pubDate>Fri, 17 Jan 2025 15:14:04 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/python02/</guid>
      <description>Python高级 面向对象编程 以一个例子来说明面向过程和面向对象在程序流程上的不同之处
假设我们要处理学生的成绩表，表示学生的成绩，面向过程的程序可以用dict表示：
std1 = { &amp;#39;name&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;score&amp;#39;: 98 } std2 = { &amp;#39;name&amp;#39;: &amp;#39;Bob&amp;#39;, &amp;#39;score&amp;#39;: 81 } 而处理学生成绩可以通过函数实现，比如打印学生的成绩：
def print_score(std): print(&amp;#39;%s: %s&amp;#39; % (std[&amp;#39;name&amp;#39;], std[&amp;#39;score&amp;#39;])) 面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是Student这种数据类型应该被视为一个对象，这个对象拥有name和score这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个print_score消息，让对象自己把自己的数据打印出来
class Student(object): def __init__(self, name, score): self.name = name self.score = score def print_score(self): print(&amp;#39;%s: %s&amp;#39; % (self.name, self.score)) 给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。面向对象的程序写出来就像这样：
bart = Student(&amp;#39;Bart Simpson&amp;#39;, 59) lisa = Student(&amp;#39;Lisa Simpson&amp;#39;, 87) bart.print_score() lisa.print_score() 类和实例 类是抽象的模板，实例是类创建的一个个具体的“对象”
和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数
定义类是通过class关键字：
class Student(object): pass class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，通常，没有合适的继承类，就使用object类，是所有类最终都会继承的类
由于类可以起到模板的作用，因此，在创建实例的时候，把我们认为必须绑定的属性强制填写进去。通过定义一个特殊的__init__方法，在创建实例的时候，就把name，score等属性绑上去：</description>
    </item>
    
    <item>
      <title>Python中级</title>
      <link>https://zwlzls.github.io/posts/python01/</link>
      <pubDate>Fri, 17 Jan 2025 15:13:58 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/python01/</guid>
      <description>Python中级使用 函数 调用函数 参数可以多个 &amp;gt;&amp;gt;&amp;gt; max(1, 2) 2 &amp;gt;&amp;gt;&amp;gt; max(2, 3, 1, -5) 3 参数类型需要一致 &amp;gt;&amp;gt;&amp;gt; abs(&amp;#39;a&amp;#39;) TypeError: bad operand type for abs(): &amp;#39;str&amp;#39; 函数调用 &amp;gt;&amp;gt;&amp;gt; abs(100) 100 &amp;gt;&amp;gt;&amp;gt; abs(-20) 20 数据类型转换
&amp;gt;&amp;gt;&amp;gt; int(&amp;#39;123&amp;#39;) 123 &amp;gt;&amp;gt;&amp;gt; int(12.34) 12 &amp;gt;&amp;gt;&amp;gt; float(&amp;#39;12.34&amp;#39;) 12.34 &amp;gt;&amp;gt;&amp;gt; str(1.23) &amp;#39;1.23&amp;#39; &amp;gt;&amp;gt;&amp;gt; str(100) &amp;#39;100&amp;#39; &amp;gt;&amp;gt;&amp;gt; bool(1) True &amp;gt;&amp;gt;&amp;gt; bool(&amp;#39;&amp;#39;) False 函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量
&amp;gt;&amp;gt;&amp;gt; a = abs # 变量a指向abs函数 &amp;gt;&amp;gt;&amp;gt; a(-1) # 所以也可以通过a调用abs函数 1 定义函数 要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回
def my_abs(x): if x &amp;gt;= 0: return x else: return -x print(my_abs(-99)) 空函数：定义一个什么事也不做的空函数，可以用pass语句</description>
    </item>
    
    <item>
      <title>Python基本</title>
      <link>https://zwlzls.github.io/posts/python00/</link>
      <pubDate>Tue, 07 Jan 2025 22:12:38 +0800</pubDate>
      
      <guid>https://zwlzls.github.io/posts/python00/</guid>
      <description>Python基础语法 Python基础 # print absolute value of an integer: a = 100 if a &amp;gt;= 0: print(a) else: print(-a) Python的语法比较简单 #开头的语句是注释
当语句以冒号:结尾时，缩进的语句视为代码块
缩进实用四个空格的缩进
议input
用input()读取用户的输入
birth = input(&amp;#39;birth: &amp;#39;) if birth &amp;lt; 2000: print(&amp;#39;00前&amp;#39;) TypeError: unorderable types: str() &amp;gt; int() 因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数
s = input(&amp;#39;birth: &amp;#39;) birth = int(s) if birth &amp;lt; 2000: print(&amp;#39;00前&amp;#39;) 可以得到正确地结果
议不可变对象：str是不变对象，list是可变对象
对于可变对象，比如list
&amp;gt;&amp;gt;&amp;gt; a = [&amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;] &amp;gt;&amp;gt;&amp;gt; a.sort() &amp;gt;&amp;gt;&amp;gt; a [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] 对于不可变对象，比如str</description>
    </item>
    
  </channel>
</rss>
